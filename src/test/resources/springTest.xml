<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.3.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
           http://www.springframework.org/schema/cache
           http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task-4.3.xsd">

    <!-- Enables swagger ui-->
    <mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/"/>
    <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>

    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean id="properties" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="location" value="classpath:biocache-test-config.properties" />
    </bean>

    <!--<context:spring-configured/>-->
    <context:component-scan base-package="au.org.ala.biocache"/>

    <!-- Configures the @Controller programming model -->
    <mvc:annotation-driven />
    <task:annotation-driven />

    <!-- Where to load static resources (css, js, images) -->
    <mvc:resources mapping="/static/**" location="/" />

    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="10">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!-- override default /WEB-INF/messages with optional /data/biocache/config/messages -->
        <property name="basenames" value="file:///data/biocache/config/messages,/WEB-INF/messages"/>
        <property name="cacheSeconds" value="10"/><!-- loads changes without restarting container -->
        <property name="useCodeAsDefaultMessage" value="true"/>
    </bean>

    <!-- This will override the default DefaultAnnotationHandlerMapping that is created,
         and not map file extensions automagically -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" p:order="2" />

    <context:property-override location="classpath:biocache-test-config.properties" ignore-unresolvable="true" ignore-resource-not-found="true" />
    <context:property-placeholder location="classpath:biocache-test-config.properties" />

    <!--
      - This bean resolves specific types of exceptions to corresponding logical
      - view names for error views. The default behaviour of DispatcherServlet
      - is to propagate all exceptions to the servlet container: this will happen
      - here with all other types of exceptions.
     -->
    <bean class="au.org.ala.biocache.web.CustomExceptionResolver">
        <property name="defaultStatusCode" value="500"/>
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.web.servlet.PageNotFound">error/pageNotFound</prop>
                <prop key="org.springframework.dao.DataAccessException">error/dataAccessFailure</prop>
                <prop key="org.springframework.transaction.TransactionException">error/dataAccessFailure</prop>
            </props>
        </property>
        <property name="statusCodes">
            <props>
                <prop key="error/pageNotFound">404</prop>
            </props>
        </property>
        <property name="defaultErrorView" value="error/general" />
    </bean>

    <!-- Content negotiation view resolver - uses either accept header mime type of the request
     -   or the file extention for the request URL -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver" p:order="1">
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.xml.MarshallingView">
                    <property name="marshaller">
                        <bean class="org.springframework.oxm.xstream.XStreamMarshaller">
                            <property name="autodetectAnnotations" value="true" />
                        </bean>
                    </property>
                </bean>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
                    <property name="objectMapper" ref="jacksonObjectMapper" />
                </bean>
            </list>
        </property>
    </bean>

    <bean id="htmlMediaType" class="org.springframework.http.MediaType">
        <constructor-arg index="0" value="text" />
        <constructor-arg index="1" value="html" />
    </bean>

    <bean id="restfulClient" class="org.ala.client.util.RestfulClient"/>
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" p:order="0">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="objectMapper" ref="jacksonObjectMapper" />
                </bean>
            </list>
        </property>
    </bean>

    <!-- beans for RestTemplate  -->
    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="objectMapper" ref="jacksonObjectMapper"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="jacksonObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
        <property name="serializationInclusion" value="NON_NULL"/>
    </bean>

    <bean id="jacksonDeserializationConfig" factory-bean="jacksonObjectMapper" factory-method="getDeserializationConfig"/>

    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="jacksonDeserializationConfig"/>
        <property name="targetMethod" value="withAttribute"/>
        <property name="arguments">
            <list>
                <value type="com.fasterxml.jackson.databind.DeserializationFeature">FAIL_ON_UNKNOWN_PROPERTIES</value>
                <value>false</value>
            </list>
        </property>
    </bean>

    <cache:annotation-driven />

<!--    <ehcache:config cache-manager="cacheManager">-->
<!--        &lt;!&ndash; interval is in minutes &ndash;&gt;-->
<!--        <ehcache:evict-expired-elements interval="60" />-->
<!--    </ehcache:config>-->

<!--    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">-->
<!--        <property name="configLocation"  value="/WEB-INF/ehcache.xml"/>-->
<!--    </bean>-->

    <bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation"  value="/WEB-INF/ehcache.xml"/>
        <property name="shared" value="true" />
    </bean>

    <bean id="ehCacheManager" factory-bean="ehCacheManagerFactory" class="net.sf.ehcache.CacheManager" />

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehCacheManager" />
    </bean>


</beans>